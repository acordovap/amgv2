from shared import config as CFG
import time
import asyncio
import random
import aioxmpp
from aioxmpp import PresenceState, PresenceShow
from spade.agent import Agent
from spade.behaviour import CyclicBehaviour
from spade.message import Message

class Note_{{ note }}(Agent):
    async def setup(self):
        ##missing attribute for state of song
        {%- for behav in behavs %}
        self.add_behaviour(self.{{ behav["b_name"] }}())
        {%- endfor %}

    {% for behav in behavs %}
    class {{ behav["b_name"] }}(CyclicBehaviour):
        async def run(self):
            contacts = self.presence.get_contacts()
            #check song online and chat, check state differ from last
                # insert lark result?
            # for i in range(CFG.no_songs): # no deeded
                # if contacts[aioxmpp.JID.fromstr("s_" + i.lower() + CFG.XMPP_SERVER)]["presence"].show == PresenceShow.CHAT:
                    # msg = Message(to="n_" + i.lower() + CFG.XMPP_SERVER)     # Instantiate the message
                    # msg.set_metadata("performative", "notepitch")  # Set the "notes" FIPA performative
                    # msg.body = self.agent.name.split("_")[1]                    # Set the message content
                    # await self.send(msg)
                print("sending msg")
                await asyncio.sleep(random.randint(1, 10)/1000)
    {% endfor %}
