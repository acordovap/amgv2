from shared import config as CFG
import time
import asyncio
import random
import aioxmpp
from aioxmpp import PresenceState, PresenceShow
from spade.agent import Agent
from spade.behaviour import CyclicBehaviour
from spade.message import Message

class Note_{{ song+'_'+track+'_'+note.replace('-', '') }}(Agent):
    async def setup(self):
        self.set("n_v", "{{ note }}")
        self.set("last_know_status", "")
        {%- for behav in behavs %}
        self.add_behaviour(self.{{ behav["b_name"] }}())
        {%- endfor %}

    {% for behav in behavs %}
    class {{ behav["b_name"] }}(CyclicBehaviour):
        async def run(self):
            contacts = self.presence.get_contacts()
            cntct = contacts[aioxmpp.JID.fromstr("{{ song }}" + CFG.XMPP_SERVER)]["presence"]
            if cntct.show == PresenceShow.CHAT:
                if cntct.status.any() != self.agent.get("last_know_status"):
                    self.agent.set("last_know_status", cntct.status.any())
                    msg = Message(to="{{ song }}".lower() + CFG.XMPP_SERVER)
                    msg.set_metadata("performative", "{{ track }}")
{{ behav["b_cmd"] }}
                    await self.send(msg)
            await asyncio.sleep(random.randint(1, 10)/1000)
    {% endfor %}
